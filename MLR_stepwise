from sklearn.datasets import load_boston
import pandas as pd
import numpy as np
import statsmodels.api as sm
#https://datascience.stackexchange.com/questions/24405/how-to-do-stepwise-regression-using-sklearn

buzzvil = pd.read_csv("/Users/sayongja/Desktop/buzzvil_2.csv")
X = buzzvil[["Cost_Total","Cost_Base","dau","nru","Cost_Buzzvil","Cost_Media","Impressions","CTR"]]
y = buzzvil[["Revenue_Total"]]

#Variable Selection and Combine
def stepwise_selection(X, y,
                       initial_list=[],
                       threshold_in=0.01,
                       threshold_out = 0.05,
                       verbose=True):
    included = list(initial_list)
    while True:
        changed=False

        ''' forward selection step 전진적 선택 : 상수항에서부터 시작하여 회귀계수가 큰놈부터 하나씩 늘려나감 즉. 상수항에서부터 모든 특성들이 있는 회귀식까지 구한 후 회귀방정식에 관한 정보를 고려하게 된다 (복잡도는 q+1) '''

        excluded = list(set(X.columns)-set(included))
        new_pval = pd.Series(index=excluded)
        for new_column in excluded: # FS같은 경우에는 최소 t-value가 1보다 작을 때 반복을 중단한다
            model = sm.OLS(y, sm.add_constant(pd.DataFrame(X[included+[new_column]]))).fit()
            new_pval[new_column] = model.pvalues[new_column]
        best_pval = new_pval.min()
        if best_pval < threshold_in:
            best_feature = new_pval.argmin()
            included.append(best_feature)
            changed=True
            if verbose:
                print('Add  {:30} with p-value {:.6}'.format(best_feature, best_pval))



        ''' backward elimination step 후진적 선택 : 즉. Fool Model에서 매번 하나씩 예측변수를 제거시켜 나가는 형식 , 제거되는 기준은 SSE의 감소가 공헌도가 가장 작은것 (복잡도는 q+1) '''

        model = sm.OLS(y, sm.add_constant(pd.DataFrame(X[included]))).fit()
        # use all coefs except intercept
        pvalues = model.pvalues.iloc[1:]
        worst_pval = pvalues.max() # Pvalue값이 null
        if worst_pval > threshold_out:
            changed=True
            worst_feature = pvalues.argmax()
            included.remove(worst_feature)
            if verbose:
                print('Drop {:30} with p-value {:.6}'.format(worst_feature, worst_pval))
        if not changed:
            break
    return included

result = stepwise_selection(X, y)

print('resulting features:')
print(result)
